Chapter1-getting started with selenium webdriver and python

https:#//135zyv4.xw0371.com/share/3ankoiSFUHzWb0Vp#


-安装Selenium 包
-选择并设置一个Python编辑器
-使用Selenium webDriver的Python客户端库实现一个简单的脚本
-在IE浏览器和Google浏览器之间实现跨浏览器支持


-安装Selenium包：
    1、使用pip安装工具安装：
        在命令提示符窗口(Windows系统要使用管理员用户打开)执行:pip install selenium

    # 注：pip使用：
        1. 安装包：pip install  somepackage
        2. 卸载包：pip uninstall somepackage
        3.升级包：pip install --upgrade somepackage （或者：pip install -U somepackage）
        4.查看过期包：pip list --outdated
        5. 查看某包信息：pip show --files somepackage
        6. 查看已安装包：pip list

    2、下载包源文件，使用setup.py手动安装：
        1.下载最新版本的Selenium 包源文件
        2.在命令提示符窗口（Windows系统要使用管理员用户打开）执行：python setup.py install


-选择并设置一个Python编辑器
    1、反正我用的Pycharm
    2、设置Pycharm


-使用Selenium webDriver的Python客户端库实现一个简单的脚本


问题1、
# 创建一个新的IE浏览器会话
ie = webdriver.Ie()
这时报错如下：
 Message: 'IEDriverServer.exe' executable needs to be in PATH.
看样子应该是IED找不到IE，具体是因为环境没有IE的驱动
解决方法：
根据环境的Python版本和操作系统，下载对应版本的浏览器驱动，放到Python安装目录下。

Chrome
点击下载chrome的webdriver： http://chromedriver.storage.googleapis.com/index.html
不同的Chrome的版本对应的chromedriver.exe 版本也不一样，下载时不要搞错了。如果是最新的Chrome, 下载最新的chromedriver.exe 就可以了。
把chromedriver的路径也加到环境变量里。

Firefox
Firefox驱动下载地址为：https://github.com/mozilla/geckodriver/releases/
根据自己的操作系统下载对应的驱动即可，使用的话，需要把驱动的路径和火狐浏览器的路径加入到环境变量里面才可以

IE
IE浏览器驱动下载地址为：http://selenium-release.storage.googleapis.com/index.html
根据自己selenium版本下载对应版本的驱动即可，python的话，下载里面的IEDriverServerxxx.zip即可，这个是区分32和64位系统的，
根据自己的系统下载即可，需要注意的是，如果要打开IE浏览器的话，需要在浏览器的Internet选项中的安全页里有4个安全选项，
Internet、本地Internet、受信任的站点、受限制的站点，这4个里面都有一个启用保护模式，都需要勾选上才可以，
还得把驱动的路径加入到环境变量中。

问题2、
查找元素的时候报：
Message: Unable to find element with css selector == [name="q"]
总是提示找不到元素，网上找了关天，总有人说是那几个常见的处理方式。实际上我这次找不到元素的原因是因为IE浏览器的安全模式设置问题。
可以参考下面这篇文章：
https://blog.csdn.net/joson1234567890/article/details/70673119


问题3、根据xpath定位元素：


selenium 页面元素定位方法：
1、使用id进行定位
<input  id = “username”></input>
 
WebDriver  driver ;
WebElement  username = driver.findElement(By.id(“username”));

2、使用name进行定位
<input  name = “username”></input>
 
WebDriver  driver；
WebElement  username = driver.findElement(By.name(“username”));
 
3、使用链接的全部文字定位(linkText)
<a  href = “http://www.sogou.com”>sogou搜索</a>
 
WebDriver  driver；
WebElement  link = driver.findElement(By.LinkText(“sogou搜索”));

4、使用部分链接文字定位
<a  href = “http://www.sogou.com”>sogou搜索</a>
 
WebDriver  driver；
//表示查找包含“sog”的链接，如果找到了多个，会将第一个拿到
WebElement  link =  driver.findElement(By.partialLinkText(“sog”));
//查找到含有sog的所有链接，并存储到List中
List<WebElement>  links =  driver.findElements(By.partialLinkText(“sog”));

5、使用标签名称进行定位(和4类似)
<input  name = “username”></input>
 
WebDriver  driver；
WebElement tag = driver.findElement(By.tagName(“input”));
List<WebElement>  tags = driver.findElements(By.tagName(“input”));
Xpath定位
 
html代码：
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head><title>Test Xpath</title>
<script>
function link(){
alert("你真美");
}

function alert1(){
alert("吃火锅");
}

 
</script>
</head>
<body>
 <div id="div1">
 <input name="div1input"></input>
 <a href="http://www.sogou.com">搜狗搜索</a>
<input type="button" id="123" value="query" onclick="alert1()"></input>
 
 <img alt="div1-img1" src="http://www.sogou.com/images/logo/new/sogou.png" onclick="link()"></img>
 
 
 </div>
 <br />
 <div name="div2">
 <input name="div2iniput" /></input>
 <a href="http://www.baidu.com">百度搜索</a>
 <img alt="div2-img2" src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1514708885619&di=30f70121fa4a3cd450633f1facbef87f&imgtype=0&src=http%3A%2F%2Fimgs.technews.cn%2Fwp-content%2Fuploads%2F2014%2F10%2FBaidu.jpg" onclick="link()"></img>
 
 <input type="button" value="查询" onclick="alert1()"></input>
 </div>
</body>
</html>
 
 
 
 
6、绝对路径定位：绝对路径  以 "/"  开头， 让xpath 从文档的根节点开始解析
WebDriver  driver；
WebElement  button = driver.findElement(By.Xpath(“/html/body/div/input[@value=’查询’]”));
 
相对路径定位：以"//" 开头， 让xpath 从文档的任何元素节点开始解析
WebDriver  driver；
WebElement  button = driver.findElement(By.Xpath(“//input[@value=’查询’]”));
 
7、使用索引号定位：
WebElement button = driver.findElement(By.xpath("//input[2]"));
 
8、使用页面属性定位：
WebElement img = driver.findElement(By.xpath(“//img[@div1-img1]”));（定位某个图片）
 
driver.findElement(By.xpath("//a[@href='http://www.sogou.com']")).click();
//定位链接

9、使用模糊的属性值定位元素
Start-with()
表达式：//img[starts-with(@alt,’div1’)]
表示查找图片alt属性开始位置包含“div1”关键字的页面元素
Contains()
表达式：//img[contains(@alt,’g1’)]
表示查找图片alt属性包含“g1”关键字的页面元素
 
driver.findElement(By.xpath("//img[contains(@alt,'img2')]")).click();
 
10、使用页面元素的文本来定位元素
 driver.findElement(By.xpath("//a[text()='百度搜索']")).click();
表示要查找包含页面上的文本“百度搜索”的链接页面元素，是精确匹配
 
driver.findElement(By.xpath("//a[contains(text(),'搜索')]")).click()；
表示要查找包含“搜索”两个字的链接页面元素，实现了根据部分文本进行匹配
