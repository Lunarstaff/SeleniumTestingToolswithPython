Chapter2-用unittest编写测试案例
    selenium webDriver是一个浏览器自动化AIP，提供了让浏览器自动运行的功能，
    这些AIP主要用来对Web应用进行测试的.

    仅使用selenium webDriver，是不能设置测试的预置条件、后置条件的，不能用来检查预期输出和实际输出，
    也不能检查应用的状态，发布测试报告，创建测试驱动数据等。

    这一章学习怎样使用Python的unittest库来创建selenium WebDriver 测试的。


1-什么是unittest
2-使用unittest库编写Selenium WebDriver测试案例
3-使用TestCase类实现一个测试
4-理解unittest库提供的各种断言方法（assert）
5-为一组测试创建一个 TestSuite（测试套件）
6-使用unittest扩展生成HTML格式的测试报告

========================================这里是分割线========================================
=====================================1-什么是unittest =====================================
Test Fixture【测试模型】:通过使用测试模型，可以定义需要的准备工作来执行一个或多个测试和任何相关的清理操作。
Test Case【测试案例】：一个测试案例是unittest中的最小单元。
                    一个案例可以通过unittest库提供的各种断言方法检查由一组特定的操作和输入产生的明确响应。
                    unittest库提供的TestCase类是基本的创建测试案例的类。
Test Suite【测试套件】：测试套件是用于创建组的多个测试或测试用例的集合，代表被测应用程序的特定功能或模块的测试，
                        这将一起执行
Test Runner【测试运行器】：测试运行器协调执行测试并提供结果给用户。
                        运行器可以使用图形界面，文本界面或返回一个特殊值来表示执行测试的结果。
Test Report【测试报告】：测试报告用于显示测试结果的摘要，展示了已执行测试用例的状态是测试通过或失败和失败步骤的预期与实际结果
以及整体运行和时间信息的摘要。

一个通过unittest创建的测试，可以被分成三个部分（3A）：
    -Arrange【使系统化】:这一部分为测试设置了前置条件，包括需要被测试的对象，相关的配置和所依赖的库。
    -Act【执行】：这一部分执行
    -Assert【断言】：这一部分检查实际输入与预期结果。

Python的其他的一些测试框架：
    -Nose:Nose对unittest库的扩展，提供了搜索和自动执行测试的能力，也提供了各种创建更高级测试的插件。
        https://nose.readthedocs.io/en/latest/
    -Pytest：Pytest是另一个测试框架，提供了许多编写、执行单元测试的高级功能。
        https://docs.pytest.org/en/latest/


========================================这里是分割线========================================
【TestCase类】
通过继承TestCase类来创建一个测试或一组测试，然后把各个测试以方法的形式添加到这个创建的类里面。
需要使用assert或assert的一种变体。
测试中最重要的任务就是：
    调用assertEqual()来检查预期结果
    调用assertTrue()来判定一个条件
    调用assertRaise()来判定一个预期的异常是否被抛出

除了添加测试之外，我们还可以为一个测试添加测试模型：
    即setUp()和tearDown()方法处理所需的任何对象或条件的创建和处置的方法

    下面开始使用unittest库定义一个从TestCase继承的类：
    注：unittest_test_v1.py

【setUp()方法】
测试案例的起始点就是setUp()方法，我们可以使用它来执行一些在每个测试或将在类中定义的所有测试开始时的任务。
这些可以是测试的预置条件任务，比如，创建一个浏览器实例，打开指定的URL，加载测试数据，打开日志文件等等。
这个方法不需要参数，也无返回值。
当有这个setUp()方法定义的时候，测试运行器会优先于其他测试方法来执行setUp()方法。
    注：unittest_test_v1.py

【编写测试】
在12306查询2018年9月25日上海到深圳的车次，如果查到结果有D2287次列车，则测试通过。
就像setUp()方法一样，测试方法也是在TestClass类中实现的。
一般，测试方法的名称都以test开头。这种命名约定，告诉测试运行器哪些方法是测试方法。
测试运行器首先查找并执行setUp()方法，再执行test开头的测试方法，这就保证了：不管在这个类中定义了多少个测试方法，
他们的执行环境（前置条件）是一致的。
最后，使用assertEqual()方法来检查预期结果是否和应用返回的结果匹配。
添加一个新的测试方法：test_search_ticket()
    注：unittest_test_v1.py

【执行测试】
通过命令行执行，可以增加一个对测试案例主方法的调用。传递verbosity参数用于显示在控制台输出详细测试结果的数量。
if __name__ == '__main__':
    unittest.main(verbosity=2)
可以把这些测试像一般的Python脚本一样保存起来，以后就可以通过命令行直接执行：
C:\> python searchtests.py

执行这些测试后，unittest会把测试的结果和概要展示在终端。


【添加另一个测试】
可以把若干个测试组合成一个测试类的一部分，这有助于对某一功能模块测试的逻辑组合。
下面，为测试类添加另一个测试。规则很简单，以test开头给测试方法命名，如下
    注：unittest_test_v1.py


【类层面的 setUp() 方法和 tearDown()方法】
在前面已经通过使用setUp()方法创建了一个新的IE浏览器实例，那么怎样可以在多个测试方法之前共享一个浏览器实例，
而不是每次执行测试方法都去创建一个新的浏览器实例呢？

可以使用 setUpClass() 和tearDownClass()方法，以及修饰器@decorator来实现。
# 这里需要进一步了解掌握修饰器
这些方法允许我们在类层面而不是方法层面初始化数值，并且可以在测试方法之间共享。
# 注：unittest_test_v2.py
运行这个测试会发现只会创建一个浏览器实例，并且两个测试都用了这个实例。

【断言】
unittest库的TestCase类提供了许多功能方法来检查预期结果和应用实际返回的结果。
这些断言方法必须以使他们代理的条件为真来保证测试执行下去的方式实现。
这些方法大致分为三类，每种覆盖一种特定的条件类型比如：检查相等，逻辑比较，例外判断等。

如果断言通过，测试将会继续执行下一行代码，否则测试会立即停止并生成一个错误信息。

下面列举出unittest库提供的断言方法中比较重要的。
┌─┬┐
├─┼┤
└─┴┘

┌----------------------------------------------┬----------------------------┐
|方法：                                         |条件:                        |
|----------------------------------------------┴----------------------------┤
|assertEqual(a, b,[, msg])                     |a == b                      |
|assertNotEqual(a, b[, msg])                   |a != b                      |
|----------------------------------------------┴----------------------------┤
|用法：这两个方法用来检查 a和b 相互之间是否相等，msg对象是如果比较失败的说明。            |
|例如：assertEqual(element.text, "10")                                       |
├----------------------------------------------┬----------------------------┤
|assertTrue(x[, msg])                          |bool(x)为真                  |
|assertFalse(x[, msg])                         |bool(x)为假                  |
|assertIsNot(a, b[ ,msg])                      |a is not b                  |
|----------------------------------------------┴----------------------------┤
|用法：这些方法用来检查 所给的布尔表达示是真（True）还是假（False）                    |
|例如：assertTrue(element.is_displayed())                                    |
├----------------------------------------------┬----------------------------┤
|assertRaises(exc, fun, *args, **kwds)         |fun(*args, **kwds) 弹出异常。 |
|assertRaisesRegexp(exc, r, fun, *args, **kwds)|fun(*args, **kwds) 弹出异常， |
|                                              |并且正则表达式r匹配到结果 。     |
|----------------------------------------------┴----------------------------┤
|用法：这些方法用来检查测试步骤是否弹出指定的异常（exc）。                             |
|例如：NoSuchElementFoundexception .                                         |
├----------------------------------------------┬----------------------------┤